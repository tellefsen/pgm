name: Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'pre-release'
        type: choice
        options:
          - pre-release
          - draft
          - full

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          version=$(grep '^version =' Cargo.toml | cut -d '"' -f 2)
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release v${{ steps.get_version.outputs.version }}
          draft: ${{ github.event.inputs.release_type == 'draft' }}
          prerelease: ${{ github.event.inputs.release_type == 'pre-release' }}

  build_and_release:
    name: Build and Release
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: pgm-linux
            asset_name: pgm-linux
          - os: macos-latest
            artifact_name: pgm-macos
            asset_name: pgm-macos
          - os: windows-latest
            artifact_name: pgm-windows.exe
            asset_name: pgm-windows.exe

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release
    
    - name: Rename binary
      shell: bash
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          mv target/release/pgm.exe ${{ matrix.artifact_name }}
        else
          mv target/release/pgm ${{ matrix.artifact_name }}
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream